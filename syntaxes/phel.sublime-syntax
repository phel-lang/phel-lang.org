%YAML 1.2
---
name: Phel
file_extensions: [phel]
scope: source.phel

contexts:
  main:
    - include: comment
    - include: string
    - include: paren
    - include: bracket
    - include: brace
    - include: keysym
    - include: literal
    - include: number
    - include: corelib
    #- include: symbol

  comment:
    # Multiline block comments: start with #| and end with |#
    - match: '#\|'
      scope: punctuation.definition.comment.begin.phel
      push:
        - meta_scope: comment.block.phel
        - match: '\|#'
          scope: punctuation.definition.comment.end.phel
          pop: true

    # Single-line comments: ; ... or # ... (but not "#{")
    - match: (;|#(?!\{)).*$
      scope: comment.line.hash-or-semicolon.phel
      captures:
        1: punctuation.definition.comment.phel

  string:
    - match: '"'
      scope: punctuation.definition.string.begin.phel
      push:
        - meta_scope: string.quoted.single.phel
        - meta_content_scope: meta.string-contents.quoted.single.phel
        - match: '(?=\S)'
          set:
            - meta_scope: string.quoted.single.phel
            - meta_content_scope: meta.string-contents.quoted.single.phel
            - match: '"'
              scope: punctuation.definition.string.end.phel
              pop: true
            - include: interpolation

  interpolation:
    - match: '\\x[0-9A-Fa-f]{1,2}'
      scope: constant.character.escape.hex.php
    - match: '\\u\{[0-9A-Fa-f]+\}'
      scope: constant.character.escape.unicodepoint.php
    - match: '\\[nrt\\\"]'
      scope: constant.character.escape.php

  paren:
    - match: '@?\('
      scope: punctuation.definition.group.begin.phel
      push:
        - meta_scope: meta.group.phel
        - match: '\)'
          scope: punctuation.definition.group.end.phel
          pop: true
        - include: main
    - match: '\)'
      scope: invalid.illegal.stray-bracket-end.phel

  bracket:
    - match: '@?\{'
      scope: punctuation.definition.group.begin.phel
      push:
        - meta_scope: meta.group.phel
        - match: '\}'
          scope: punctuation.definition.group.end.phel
          pop: true
        - include: main
    - match: '\}'
      scope: invalid.illegal.stray-bracket-end.phel

  brace:
    - match: '@?\['
      scope: punctuation.definition.group.begin.phel
      push:
        - meta_scope: meta.group.phel
        - match: '\]'
          scope: punctuation.definition.group.end.phel
          pop: true
        - include: main
    - match: '\]'
      scope: invalid.illegal.stray-bracket-end.phel

  keysym:
    - match: ":[^\\s\\#\\(\\)\\{\\}\\[\\]\\'\\\"\\,\\`]+"
      scope: keyword.operator

  literal:
    - match: "(true|false|nil)(?=\\s|\\)|\\]|\\})"
      scope: constant.language.phel

  number:
    - match: '[-+]?\b(0[bB])[01]+(_[01]+)*\b'
      scope: constant.numeric.integer.binary.phel
      captures:
        1: punctuation.definition.numeric.binary.phel
    - match: '[-+]?\b(0[xX])[0-9a-fA-F]+(_[0-9a-fA-F]+)*\b'
      scope: constant.numeric.integer.hexadecimal.phel
      captures:
        1: punctuation.definition.numeric.hexadecimal.phel
    - match: '[-+]?\b0[0-7]+(_[0-7]+)*\b'
      scope: constant.numeric.integer.octal.phel
    - match: |-
        [-+]?(?x:
          (?:(\b\d+|\B)\.\d+|\b\d+\.\d*)(?:[eE][+-]?\d+)?\b
          |
          \b\d+(?:[eE][+-]?\d+)\b
        )
      scope: constant.numeric.float.decimal.phel
    - match: '[-+]?\b\d+\b'
      scope: constant.numeric.integer.decimal.phel

  corelib:
    - match: "(?<=\\(|\\{|\\[|\\s)(defstruct|definterface|defmacro-|defmacro|defn-|defn|def-|def|recur|fn|throw|try|catch|finally|loop|ns|quote|dofor|do|if-not|if|when-not|when|apply|let|foreach|for|case|cond|list|vector|hash-map|set|println)(?=\\s|\\)|\\]|\\})"
      scope: keyword.control.phel
    - match: "(?<=\\(|\\{|\\[|\\s)(php\\/[^\\s\\#\\(\\)\\{\\}\\[\\]\\'\\\"\\,\\`]+)(?=\\s|\\)|\\]|\\})"
      scope: keyword.other.phel

  symbol:
    - match: "[^\\s\\#\\(\\)\\{\\}\\[\\]\\'\\\"\\,\\`]+"
      scope: meta.symbol.phel
